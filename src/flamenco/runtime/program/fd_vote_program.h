#ifndef HEADER_fd_src_flamenco_runtime_program_fd_vote_program_h
#define HEADER_fd_src_flamenco_runtime_program_fd_vote_program_h

/* The vote program (native program) allows node operators to register
   their nodes and participate in consensus.  The vote program
   implements various Tower BFT logic like voting and lockouts.  The set
   of vote accounts is the 'source of truth' for Solana's consensus
   algorithm.

   Address: Vote111111111111111111111111111111111111111 */

#include "../context/fd_exec_instr_ctx.h"
#include "../fd_bank.h"

/* Some vote instruction types are dynamically sized:
    - tower_sync_switch                (contains deque of fd_vote_lockout_t)
    - tower_sync                       (contains deque of fd_vote_lockout_t)
    - compact_vote_state_update_switch (vector of fd_lockout_offset_t)
    - compact_vote_state_update        (vector of fd_lockout_offset_t)
    - authorize_checked_with_seed      (char vector of current_authority_derived_key_seed)
    - authorize_with_seed              (char vector of current_authority_derived_key_seed)
    - update_vote_state_switch         (contains deque of fd_vote_lockout_t)
    - update_vote_state                (contains deque of fd_vote_lockout_t)
    - vote_switch                      (deque of slot numbers)
    - vote                             (deque of slot numbers)
   All other vote instruction types are statically sized.

   A loose bound on the max amount of encoded fd_vote_lockout_t
   possible is 1232 bytes/(12 bytes/per lockout) = 102 lockouts.  So
   the worst case bound for the deque of fd_vote_lockout is
   32 + (102 * sizeof(fd_vote_lockout_t)) = 1644 bytes.

   The worst case vector of fd_lockout_offset_t is one where each
   encoded element is 2 bytes.  This means that we can have 1232/2 =
   616 elements.  They are represented as being 16 bytes each, so the
   total footprint would be 9856 bytes.

   The deque of slot numbers is a vector of ulong, which is 8 bytes.
   So the worst case is 1232 bytes/8 bytes = 154 elements.  So, the
   total footprint is 32 + (154 * 8 bytes) = 1264 bytes.

   The worst case char vector is 1232 bytes as each element is 1 byte
   up to the txn MTU.

   With this, that means that the compact_vote_state_update_switch
   can have the largest worst case footprint where the struct is
   104 bytes (sizeof(fd_compact_vote_state_update_switch_t) + the
   worst case lockout vector of 616 elements. */
#define FD_LOCKOUT_OFFSET_FOOTPRINT   (9856UL)
#define FD_VOTE_INSTRUCTION_FOOTPRINT (sizeof(fd_vote_instruction_t) + FD_LOCKOUT_OFFSET_FOOTPRINT)

/* TODO: This is the value as generated by fd_types bincode decoding of
   fd_vote_state_versioned_t.  This should eventually be replaced. */
#define FD_VOTE_STATE_VERSIONED_FOOTPRINT (9248UL)

/* The footprint of a fd_vote_authorized_voters_t struct is defined as a
   fd_vote_authorized_voters_t followed by a pool and then a treap. */
#define FD_AUTHORIZED_VOTERS_ALIGN     (128UL)
#define FD_AUTHORIZED_VOTERS_FOOTPRINT (4888UL)

/* TODO: These footprints are currently overprovisioned due to test
   fixtures which currently violate protocol invariants. */

/* The footprint of the landed votes is determined by a deque with max
   cnt of 31.  The footprint is as follows:
   alignof(DEQUE_T) == alignof(fd_landed_vote_t) == 8
   sizeof(DEQUE_T)  == sizeof(fd_landed_vote_t)  == 24
   return fd_ulong_align_up( fd_ulong_align_up( 32UL, alignof(DEQUE_T) ) + sizeof(DEQUE_T)*max, alignof(DEQUE_(private_t)) );
   return fd_ulong_align_up( fd_ulong_align_up( 32UL, 8UL ) )            + 24UL*31UL, 8UL );
   return fd_ulong_align_up( 32UL + 744, 8UL ) == 776 */
#define FD_LANDED_VOTES_ALIGN     (32UL)
#define FD_LANDED_VOTES_FOOTPRINT (FD_VOTE_STATE_VERSIONED_FOOTPRINT)

/* The calculation for the landed votes footprint is the same as the
   calculation for the landed votes but the sizeof(fd_vote_lockout_t)
   is 16 bytes:
   return fd_ulong_align_up( 32UL + 16UL * 31UL, 8UL ) == 528UL */
#define FD_VOTE_LOCKOUTS_ALIGN     (32UL)
#define FD_VOTE_LOCKOUTS_FOOTPRINT (FD_VOTE_STATE_VERSIONED_FOOTPRINT)

/* Vote program custom error codes */

#define FD_VOTE_ERR_VOTE_TOO_OLD                    ( 0)
#define FD_VOTE_ERR_SLOTS_MISMATCH                  ( 1)
#define FD_VOTE_ERR_SLOTS_HASH_MISMATCH             ( 2)
#define FD_VOTE_ERR_EMPTY_SLOTS                     ( 3)
#define FD_VOTE_ERR_TIMESTAMP_TOO_OLD               ( 4)
#define FD_VOTE_ERR_TOO_SOON_TO_REAUTHORIZE         ( 5)
#define FD_VOTE_ERR_LOCKOUT_CONFLICT                ( 6)
#define FD_VOTE_ERR_NEW_VOTE_STATE_LOCKOUT_MISMATCH ( 7)
#define FD_VOTE_ERR_SLOTS_NOT_ORDERED               ( 8)
#define FD_VOTE_ERR_CONFIRMATIONS_NOT_ORDERED       ( 9)
#define FD_VOTE_ERR_ZERO_CONFIRMATIONS              (10)
#define FD_VOTE_ERR_CONFIRMATION_TOO_LARGE          (11)
#define FD_VOTE_ERR_ROOT_ROLL_BACK                  (12)
#define FD_VOTE_ERR_CONFIRMATION_ROLL_BACK          (13)
#define FD_VOTE_ERR_SLOT_SMALLER_THAN_ROOT          (14)
#define FD_VOTE_ERR_TOO_MANY_VOTES                  (15)
#define FD_VOTE_ERR_VOTES_TOO_OLD_ALL_FILTERED      (16)
#define FD_VOTE_ERR_ROOT_ON_DIFFERENT_FORK          (17)
#define FD_VOTE_ERR_ACTIVE_VOTE_ACCOUNT_CLOSE       (18)
#define FD_VOTE_ERR_COMMISSION_UPDATE_TOO_LATE      (19)

#define FD_VOTE_STATE_V2_SZ (3731UL)
#define FD_VOTE_STATE_V3_SZ (3762UL)

FD_PROTOTYPES_BEGIN

/* fd_vote_program_execute is the instruction processing entrypoint
   for the vote program. */

int
fd_vote_program_execute( fd_exec_instr_ctx_t * ctx );

/* https://github.com/anza-xyz/agave/blob/v2.0.1/sdk/program/src/vote/state/vote_state_versions.rs#L90 */
uint
fd_vote_state_versions_is_correct_and_initialized( fd_txn_account_t * vote_account );

/* An implementation of solana_sdk::transaction_context::BorrowedAccount::get_state
   for setting the vote state.

   https://github.com/anza-xyz/agave/blob/v2.1.14/sdk/src/transaction_context.rs#L965 */
fd_vote_state_versioned_t *
fd_vote_get_state( fd_txn_account_t const * self,
                   uchar *                  mem );

void
fd_vote_convert_to_current( fd_vote_state_versioned_t * self,
                            uchar *                     authorized_voters_mem,
                            uchar *                     landed_votes_mem );

struct fd_commission_split {
  ulong voter_portion;
  ulong staker_portion;
  uint  is_split;
};
typedef struct fd_commission_split fd_commission_split_t;

void
fd_vote_commission_split( uchar                   commission,
                          ulong                   on,
                          fd_commission_split_t * result );

void
fd_vote_store_account( fd_txn_account_t *   vote_account,
                       fd_bank_t *          bank );

FD_PROTOTYPES_END

#endif /* HEADER_fd_src_flamenco_runtime_program_fd_vote_program_h */
